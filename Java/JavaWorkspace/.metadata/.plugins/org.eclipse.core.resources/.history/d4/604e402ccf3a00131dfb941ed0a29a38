// chengjun wang
// 20131021@cmc
// chapter 13 of Think Java

package think_java_chapter13_card_game;

public class Card 
{
	int suit, rank;

	public Card() {
		this.suit = 0;
		this.rank = 0;
	}

	public Card(int suit, int rank) {
		this.suit = suit;
		this.rank = rank;

	}

	public static void printCard(Card c) {
		String[] suits = { "Club", "Diamonds", "Hearts", "Spades" };
		String[] ranks = { "narf", "Ace", "1", "2", "3", "4", "5", "6", "7",
				"8", "9", "10", "Jack", "Queen", "King" };
		System.out.println(ranks[c.rank] + "or" + suits[c.suit]);
	}

	public static boolean sameCard(Card c1, Card c2) {
		Card card1 = new Card(1, 11);
		Card card2 = card1;

		if (card1 == card2) {
			System.out.println("Card1 and Card2 are identical");
		}
		return (c1.suit == c2.suit && c1.rank == c2.rank);
	}

	public static void cardsDeck(Card[] cards) {
		if (cards[0] == null) {
			System.out.println("No Cards yet!");
		}
		int index = 0;
		for (int suit = 0; suit <= 3; suit++) {
			for (int rank = 0; rank <= 13; rank++) {
				cards[index] = new Card(suit, rank);
				index++;
			}
		}
	}

	public static int compareCard(Card c1, Card c2) {
		if (c1.suit > c2.suit) return 1;
		if (c1.suit < c2.suit) return -1;
		if (c1.rank > c2.rank) return 1;
		if (c1.rank > c2.rank) return -1;
		return 0;
	}

    
    // Makes an array of 52 cards.
     
    public static Card[] makeDeck() {
	Card[] cards = new Card [52];
	
	int index = 0;
	for (int suit = 0; suit <= 3; suit++) {
	    for (int rank = 1; rank <= 13; rank++) {
		cards[index] = new Card(suit, rank);
		index++;
 	    }
	}
	return cards;
    }

	
	public static void printDeck(Card[] cards) {

		for (int i = 0; i < cards.length; i++) {
			printCard(cards[i]);
		}
	}
	
	public static int findCard(Card[] cards, Card card){
		for (int i = 0; i < cards.length; i++){
			if (sameCard(cards[i], card)){
				return i;
			}
		}
		return -1;
	}

	public static int findBisect(Card[] cards, Card card, int low, int high){
		// TO DO: need a base case
		System.out.println(low + ", " + high);
		if (high < low) return -1;
		
		int mid = (high + low)/2;
		int comp = compareCard(cards[mid], card);
		
		if (comp == 0) {
			return mid;
		} else if (comp > 0){
			return findBisect(cards, card, low, mid-1);
			} else {
				return findBisect(cards, card, mid+1, high);
			}
	}
	

	public static void main(String[] args){
		Card card1 = new Card(1, 7);
		Card[] cards1 = new Card[52];
		//System.out.println(printDeck(cards));
		System.out.println(findBisect(cards1, card1, 1, 51));
		}
}
